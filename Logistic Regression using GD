{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Logistic Regresion With GD (Gradient Descent)\n",
        "hasil yang didapatkan dengan iterasi 50000 dan Learning Rate sebesar 0.5\n",
        "\n",
        "w : [-22.86225049, -32.07887625]\n",
        "\n",
        "bias : 29.722984605583232"
      ],
      "metadata": {
        "id": "aIGtrvKkaCwL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Import Library dan Data yang dibutuh"
      ],
      "metadata": {
        "id": "a3LgMUEzarvA"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9PeNER8usmQa"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.metrics import r2_score\n",
        "import matplotlib.pyplot as plt\n",
        "from math import exp\n",
        "import seaborn as sns\n",
        "from sklearn.linear_model import LogisticRegression\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NK4NDkFmsmQc"
      },
      "outputs": [],
      "source": [
        "X_train = np.array([[0.08, 0.72], [0.26, 0.58], [0.45, 0.15], [0.60, 0.30], [0.10, 1.0], [0.35, 0.95], [0.70, 0.65], [0.92, 0.45]])\n",
        "\n",
        "y_train = np.array([1, 1, 1, 1, 0, 0, 0, 0])\n",
        "\n",
        "X_test = np.array([[0.10, 0.9], [0.4, 0.2], [0.8, 0.5], [0.2, 0.6]])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "WOtmN43UsmQc",
        "outputId": "886f20eb-79c6-489d-e803-e9810ef29fd7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      x     y  Class\n",
              "0  0.08  0.72      1\n",
              "1  0.26  0.58      1\n",
              "2  0.45  0.15      1\n",
              "3  0.60  0.30      1\n",
              "4  0.10  1.00      0\n",
              "5  0.35  0.95      0\n",
              "6  0.70  0.65      0\n",
              "7  0.92  0.45      0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d76116aa-51d9-46fc-9642-9b7abdbbae92\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x</th>\n",
              "      <th>y</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.08</td>\n",
              "      <td>0.72</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.26</td>\n",
              "      <td>0.58</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.45</td>\n",
              "      <td>0.15</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.60</td>\n",
              "      <td>0.30</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.10</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.35</td>\n",
              "      <td>0.95</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.70</td>\n",
              "      <td>0.65</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.92</td>\n",
              "      <td>0.45</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d76116aa-51d9-46fc-9642-9b7abdbbae92')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d76116aa-51d9-46fc-9642-9b7abdbbae92 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d76116aa-51d9-46fc-9642-9b7abdbbae92');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "dfComplete = dfX_Train = pd.DataFrame(X_train, columns=['x', 'y'])\n",
        "dfComplete['Class'] = pd.DataFrame(y_train)\n",
        "dfComplete\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Visualisasi data menggunakan Scatter"
      ],
      "metadata": {
        "id": "JqdpIyd4azbP"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "JPbjmq39smQd",
        "outputId": "37441261-ecbf-42de-bb35-25d750498cd1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f97bffeab50>"
            ]
          },
          "metadata": {},
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "sns.scatterplot(x=X_train[:, 0], y=X_train[:, 1], hue=y_train, s=100)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Membuat class untuk kebutuhan Logistic Regression dengan menggunakan Gradient Desent"
      ],
      "metadata": {
        "id": "BcZL__NPa4ak"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mRNBHxDPsmQd"
      },
      "outputs": [],
      "source": [
        "class LogisticRegressionManual():\n",
        "    def __init__(self, Iteration, LearningRate):\n",
        "        self.LearningRate = LearningRate\n",
        "        self.iteration = Iteration\n",
        "\n",
        "    def fittingData(self, X, y):\n",
        "        self.col, self.row = X.shape\n",
        "        self.m = np.zeros(self.row)\n",
        "        self.b = 0\n",
        "        self.X = X\n",
        "        self.Y = y\n",
        "        loss = []\n",
        "\n",
        "        for _ in range(self.iteration) :\n",
        "            A = 1/(1 + np.exp(-(np.dot(self.X, self.m) + self.b)))\n",
        "            # print(A)\n",
        "            Temp = (A - self.Y.T)\n",
        "            Temp = np.reshape(Temp, self.col)\n",
        "            Newb = np.sum(Temp)/self.col\n",
        "            Newm = np.dot(self.X.T, Temp)/ self.col\n",
        "            self.b -= Newb*self.LearningRate\n",
        "            self.m -= Newm*self.LearningRate\n",
        "            LossData = -1 * sum(y*np.log(A) + (1-y)*np.log(1-A))\n",
        "            loss.append(LossData)\n",
        "\n",
        "        return loss\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Fungsi untuk melakukan prediksi data berdasarkan m dan Bias yang diberikan"
      ],
      "metadata": {
        "id": "2uNI8XCNbC43"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e2RiPdHssmQe"
      },
      "outputs": [],
      "source": [
        "def PredictResult(X, m, b):\n",
        "    Z = 1 / (1 + np.exp(- (X.dot(m) + b)))\n",
        "    Y = np.where(Z > 0.5, 1, 0)\n",
        "    return Y\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Pemanggilan Model dan mencari m dan bias yang didapatkan dengan menggunakan 50000 iterasi dengan learning rate 0.5"
      ],
      "metadata": {
        "id": "U3w4iyVobKuS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G-0pwI21smQe",
        "outputId": "2b9814a9-2be5-48e5-8e2a-9218206cb10c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-22.86225049 -32.07887625] 29.722984605583232\n"
          ]
        }
      ],
      "source": [
        "ModelManual = LogisticRegressionManual(50000, 0.5)\n",
        "loss = ModelManual.fittingData(X_train, y_train)\n",
        "print(ModelManual.m, ModelManual.b)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Visualisasi hasil loss dari iterasi diatas"
      ],
      "metadata": {
        "id": "p3RnTco0bV6F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(np.arange(ModelManual.iteration), loss[0:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "LA2LiN1tO-Ws",
        "outputId": "c377e06b-ff44-4663-9e57-91744ca6a59a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f97bfc6d390>]"
            ]
          },
          "metadata": {},
          "execution_count": 44
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWsAAAD4CAYAAAAqw8chAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAWh0lEQVR4nO3dfXBcV33G8ed3791dSZZs2bEs3NjBCQ4vTmiM0aQJSSmEITUhA3+0nQktDEOZ8QChhbZTSoaZzjB0Oi19GWDaATw0Q1sIEAoZaKANISQhvDRBjp33FzvGxDaJJceWLVmypN09/WPPrnZX62jtaHXPrr6fyc7evffs3d9RVo+Oz96915xzAgCELUq7AADAwghrAGgDhDUAtAHCGgDaAGENAG0gacVO165d6zZt2tSKXQNAR9q1a9dR59zAmba3JKw3bdqk4eHhVuwaADqSmf3qxbYzDQIAbYCwBoA2QFgDQBsgrAGgDRDWANAGCGsAaAOENQC0gaDC+nN37dW9T4+mXQYABCeosP78Pc/op/uOpl0GAAQnqLCOTCoWuRgCANQLLKxNBa5cAwDzhBXWkYmsBoD5wgprk4qkNQDME1hYG2ENAA0EFdZmpkIx7SoAIDxBhXUcSY6RNQDME1RYMw0CAI0FF9ZMgwDAfGGFNdMgANBQWGHNNAgANBRgWKddBQCEJ6iwNhNfNweABoIK69iMOWsAaCCosI7MVORoEACYJ6iwZhoEABpLmmlkZgckjUsqSMo754ZaUUwcMQ0CAI00Fdbem51zLb2MC0eDAEBjQU2DcIpUAGis2bB2kn5gZrvMbEejBma2w8yGzWx4dPTcLnpbOuseYQ0A9ZoN66udc9skvU3SjWb2xvoGzrmdzrkh59zQwMDAORUTc6UYAGioqbB2zh329yOSbpN0eUuKYRoEABpaMKzNbIWZ9ZWXJV0r6dFWFMM0CAA01szRIIOSbjOzcvtbnHP/24piYsIaABpaMKydc/slXbYEtSiKpNkCYQ0A9QI7dI9TpAJAI0GFtZmJgTUAzBdUWMfGlWIAoJGgwpppEABoLKiwNi6YCwANBRXWSWQqcugeAMwTVFjHkSnP1QcAYJ7gwpqBNQDMF1xYM7IGgPmCC2uyGgDmCyusjZE1ADQSVljHHLoHAI2EFdZmKjCyBoB5wgrriFOkAkAjhDUAtIGgwjqJTAXODQIA8wQV1hEjawBoKKiw5rJeANBYWGHtv27OOa0BoFZwYS2J0TUA1AkyrPOENQDUCDKsuVoMANQKKqwTRtYA0FBQYR2ZH1kT1gBQI6iwTmI+YASARoIK6/LImrAGgFpNh7WZxWa228xub1Ux5TlrvnIOALXOZmT9EUlPtKoQqfR1c0nKFwhrAKjWVFib2QZJb5f0pVYWk3DoHgA01OzI+jOSPiappVcG4EsxANDYgmFtZtdLGnHO7Vqg3Q4zGzaz4dHR0XMqpvKlGMIaAGo0M7K+StI7zOyApK9LusbMvlLfyDm30zk35JwbGhgYOKdiYmNkDQCNLBjWzrmbnHMbnHObJN0g6UfOuXe3ohhO5AQAjQV1nDVhDQCNJWfT2Dl3j6R7WlKJqsKao0EAoAYjawBoA4Q1ALSBsMKac4MAQENBhTVn3QOAxoIKa866BwCNBRXWSVQqh7AGgFpBhbXPar7BCAB1ggprRtYA0FhYYR2Xzw3S0pP7AUDbCSqss3GpnJk8YQ0A1YIK64wPa+asAaBWUGFdngaZLTCyBoBqQYV1eWQ9yzUYAaBGYGHNyBoAGgksrP2cNWENADWCCuvy1c1nmAYBgBpBhbWZKRMb0yAAUCeosJZKUyFMgwBAreDCOomMo0EAoE5wYZ1NIqZBAKBOcGGdRIQ1ANQLLqwziSnPNAgA1AgvrKNIM4ysAaBGeGEdR4ysAaBOcGGdcJw1AMwTXFhnYqZBAKBecGGdZRoEAOZZMKzNrMvMHjCzh8zsMTP7ZCsLYhoEAOZrZmQ9Leka59xlkrZK2m5mV7SqoEwcaZYrxQBAjWShBs45J2nCP8z4W8vSNBObZrkGIwDUaGrO2sxiM9sjaUTSnc65+xu02WFmw2Y2PDo6es4FZeKIq5sDQJ2mwto5V3DObZW0QdLlZnZpgzY7nXNDzrmhgYGBcy4oiSNO5AQAdc7qaBDn3JikuyVtb005pWmQGaZBAKBGM0eDDJhZv1/ulvRWSU+2qqBszImcAKDegh8wSlov6d/NLFYp3G91zt3eqoJySaRpRtYAUKOZo0EelvS6JahFkpTLxJrOF5bq5QCgLQT3DcauJNLp2aJKRwwCAKQAwzqXiSWJ84MAQJXwwjoplXR6lrAGgLLwwtqPrJm3BoA5wYV1lx9ZTzOyBoCK4MKakTUAzBdcWHcxZw0A8wQX1oysAWC+8MKaOWsAmCe4sO7yI+vTjKwBoCK4sGZkDQDzBRfWjKwBYL7gwpqRNQDMF1xYV0bWs4ysAaAsuLCujKw5pzUAVAQb1nwpBgDmBBfWSRwpE5ummAYBgIrgwlqSerKJpmbyaZcBAMEIMqx7c4kmphlZA0BZkGHdk401ycgaACrCDOtcoolpwhoAyoIM695crMkZpkEAoCzIsO7JJjrFyBoAKoIM6xXZWKeYswaAijDDOpdokqNBAKAi2LDmA0YAmBNmWGcTTeeLyhf4yjkASE2EtZltNLO7zexxM3vMzD7S6qJW5Epn3pvkK+cAIKm5kXVe0l8457ZIukLSjWa2pZVF9WQTSeKIEADwFgxr59xzzrkH/fK4pCcknd/Kosoj61N8yAgAks5yztrMNkl6naT7G2zbYWbDZjY8Ojr6korqzZVG1uOnZ1/SfgCgUzQd1mbWK+lbkj7qnDtZv905t9M5N+ScGxoYGHhJRfX3ZCRJJ6YIawCQmgxrM8uoFNRfdc59u7UlSau6CWsAqNbM0SAm6d8kPeGc++fWlySt6s5Kkk4S1gAgqbmR9VWS3iPpGjPb42/XtbKo8sh6bJKwBgBJShZq4Jz7iSRbgloqskmknmzMNAgAeEF+g1Eqja7HCGsAkBR4WDOyBoASwhoA2kCwYd3fk9EJPmAEAEkhh3V3VmNTM2mXAQBBCDasV6/I6vipWTnn0i4FAFIXbFgP9OU0Uyjq5BRn3gOAoMNakkYnTqdcCQCkL9yw7i2F9cj4dMqVAED6wg3r8siasAYAwhoA2kGwYb2yK1E2iTQ6QVgDQLBhbWYa6M0xsgYABRzWkrRuZU5HTnI0CAAEHdbn93fr8PGptMsAgNQFHdYbVvfo8NiUikW+xQhgeQs8rLs1W3Acaw1g2Qs6rDeu6ZEkHTo+mXIlAJCuoMN6w+puSdIh5q0BLHNBh/X5/aWwPniMkTWA5S3osO7KxBpcmdMvXziVdikAkKqgw1qSLl7Xp2dGJtIuAwBSFXxYb17Xq70jE1yEAMCyFnxYXzzYq8mZgn59gm8yAli+wg/rdX2SpL1HxlOuBADS0wZh3StJ2nuEeWsAy1fwYb16RVa/sapLDx8+kXYpAJCaBcPazG42sxEze3QpCmrkso39eujgWFovDwCpa2Zk/WVJ21tcx4u6bGO/nj02qWOnZtIsAwBSs2BYO+d+LOnYEtRyRls39ksSo2sAy9aizVmb2Q4zGzaz4dHR0cXarSTpteevUhyZfnEg1b8ZAJCaRQtr59xO59yQc25oYGBgsXYrSVqRS7R1Y79++swLi7pfAGgXwR8NUnbV5rV65NCYTkzOpl0KACy5tgnr3754rYpO+tkzR9MuBQCWXDOH7n1N0s8lvcrMDpnZ+1tf1nxbN/arryvRD58YSePlASBVyUINnHPvWopCFpKJI1275WX6wePPazp/qXJJnHZJALBk2mYaRJKuv2y9xk/ndd/TTIUAWF7aKqyvesVa9fdkdNvuw2mXAgBLqq3COptE+r1tG3THY89r5CSnTAWwfLRVWEvSe654ufJFp1seeDbtUgBgybRdWG9au0JvftWA/vPnv9Kp6Xza5QDAkmi7sJakP3nLxXrh1Iy+/LMDaZcCAEuiLcN62wWrdc2r12nnj/dzJj4Ay0JbhrUk/dX2V+vUdF5/+/0n0i4FAFqubcP6VS/r0443XqT/2nVI9+1d3LP8AUBo2jasJelP33KxNq/r1Z99Y4+e5+rnADpYW4d1VybWF969TZMzBX3oq7s0NVNIuyQAaIm2DmtJ2ryuT//4B5dp98Ex3XjLg5otFNMuCQAWXduHtSRd99r1+tQ7L9WPnhzRB7/yICNsAB2nI8Jakt59xcv1qXdeoruePKI//NL/8XV0AB2lY8Jakt5z5SZ9/o+26YnnTuq6z92ne5/mKBEAnaGjwlqStl+6Xv/94at13oqc3nvzA/rLbz6kFyam0y4LAF6SjgtrSbp4sE/f+fBV+sDvvEK37T6sa/7pXn3+nmc4lwiAtmXOuUXf6dDQkBseHl70/Z6LvUfG9Tffe0L3Pj2q1T0Zve+qC3XD5Ru1rq8r7dIAoMLMdjnnhs64vdPDumz3s8f12bv26p6nRpVEpmsvGdTvv36Drt48oGzSkf/AANBGCOs6+0cndMv9z+qbuw7pxNSs+roSvXXLoK7d8jJd+YrztKo7k3aJAJYhwvoMpvMF/XTfUX3v4ed15+PP6+TpvCKTLtvYr6s3r9XQpjXauqFfq3oIbwCtR1g3YSZf1J6DY/rJ3lHdt++oHjo4pqL/sVy4doW2buzXpeev0isHe/XKwT6t68vJzNItGkBHIazPwfjpWT1y6IR2HxzTHn8bHZ87/G9Vd0avHOzV5nW92rimRxf428bVPervyRDkAM7aQmGdLGUx7aKvK6M3bF6rN2xeK0lyzunoxIz2HhnX00fG9fTIhPYeGdcdjx2Zd/GDvlyiDWt6NLgyp8G+Lg2uzGlgZZcG+3IaXNmldStzWtubUybmQ00AzSOsm2BmGujLaaAvVwnwsonpvA4em9TBY5N69tikDh2f0qHjkzpyclqP//qkjk5MV6ZUqvXlEvWvyGhNT1b9PVmtWZFVf09Gq3uyWr0iq/7ujPq6EvV1le8T9eYSrcgmiiJG7sByQ1i/RL25RK9Zv1KvWb+y4fZ8oagXTs1o5OS0jpw8redPntYLEzM6PjmjsckZHZuc1fHJGe0/OqHjp2Y1scAXd8yk3myiXh/efV2Jersy6s3F6srE6snG6s6Ubl3ZWD2ZWN3Z0rbuTKyebKLubOTbJurOxMolkXKZSNk4UsKIHwgSYd1iSRxpcGWXBld26bVatWD7mXxRY1MzGpuc1fjpvCam8xo/PauJ03mNn85rfDrvl0vBPjGd14mpWf16bEqnZwuamiloarZ0O5ePIyKTckmsbBKVbvFckOf8usr2qm2V9kmkTBQpiU2ZOFISmZI4UiY2JZX1ftlvS2Krek51u1KbjG8z95zSushMcWSKTHxOgI7XVFib2XZJn5UUS/qSc+7vWlrVMpZNIq3r63rJ37B0zmk6X6yE9+RMoRTmfnnKPy6vnykUNZMv3abzhdJyoajpfOlWvW1yJq+xqfLjuW3lx/liseHUTyvFkSk2UxRJsQ/x8i0yUxKZovI6Ky0nflsczT2u7KPqeXFVu7huH7GZ4rj0ByOyUjurLMs/rt4u/9ivi86yffX+o7NsX7O99Nr17U2l9tLcc61qvanUvma5qq3k29etN0ny+4mqtlf2HdXur+Y1615/rq7l9Qd6wbA2s1jSv0p6q6RDkn5hZt91zj3e6uJw7sxMXZnS9MfqFF6/WHSaLRaVLzjlC3PLs4Wi8kWnfKGo2YJToaZdUbNV2/INnlO6Lz2nWHQqFKWCcyoUiyoUpaIr7bNyc863m3tcKDoVXWk/lfauVHO+WFSxKM0WijX7mWtXta7qsXOl1y76+7nHpXWubhsWT/mPUXXIqz7YVfeHoG595P+azK2r/cOiyvPmXktV+yy/3nkrcrr1A1e2pJ/NjKwvl7TPObffF/d1Se+URFjjjKLIlIti5Zhom8e5swv3Yn374lm2d25ue/HM7QtFJ1euT5Jzdcty/n6uD5V15deRpKr1xbrnybcpFqv322B/mtunarbXv5abt668H/9f3Wu5M/ar6Isv96e+D5X9VWqqqt33e2V3697wzez5fEkHqx4fkvRb9Y3MbIekHZJ0wQUXLEpxQCcqj+oiLa9/xuOlWbSP/p1zO51zQ865oYGBgcXaLQBAzYX1YUkbqx5v8OsAAEukmbD+haSLzexCM8tKukHSd1tbFgCg2oJz1s65vJl9WNIdKh26d7Nz7rGWVwYAqGjqo0vn3Pclfb/FtQAAzoDvFgNAGyCsAaANENYA0AZacvEBMxuV9KtzfPpaSUcXsZx2QJ8733Lrr0Sfz9bLnXNn/JJKS8L6pTCz4Re7WkInos+db7n1V6LPi41pEABoA4Q1ALSBEMN6Z9oFpIA+d77l1l+JPi+q4OasAQDzhTiyBgDUIawBoA0EE9Zmtt3MnjKzfWb28bTrOVtmdrOZjZjZo1Xr1pjZnWa219+v9uvNzD7n+/qwmW2res57ffu9ZvbeqvWvN7NH/HM+ZwFcgM7MNprZ3Wb2uJk9ZmYf8es7tt9m1mVmD5jZQ77Pn/TrLzSz+32d3/BnqJSZ5fzjfX77pqp93eTXP2Vmv1u1PrjfBTOLzWy3md3uH3d6fw/4990eMxv269J9Xzt/yZ80byqdze8ZSRdJykp6SNKWtOs6yz68UdI2SY9Wrfu0pI/75Y9L+nu/fJ2k/1Hpsm1XSLrfr18jab+/X+2XV/ttD/i25p/7tgD6vF7SNr/cJ+lpSVs6ud++jl6/nJF0v6/vVkk3+PVfkPRBv/whSV/wyzdI+oZf3uLf5zlJF/r3fxzq74KkP5d0i6Tb/eNO7+8BSWvr1qX6vk71B1L1Q7hS0h1Vj2+SdFPadZ1DPzapNqyfkrTeL6+X9JRf/qKkd9W3k/QuSV+sWv9Fv269pCer1te0C+Um6TsqXVh5WfRbUo+kB1W6zN1RSYlfX3k/q3Rq4Sv9cuLbWf17vNwuxN8FlS44cpekayTd7uvv2P76Og5oflin+r4OZRqk0XUez0+plsU06Jx7zi8/L2nQL5+pvy+2/lCD9cHw/9x9nUojzY7ut58S2CNpRNKdKo0Mx5xzed+kus5K3/z2E5LO09n/LNL0GUkfk1T0j89TZ/dXKl0L9wdmtstK15eVUn5fc+3pJeKcc2bWkcdJmlmvpG9J+qhz7mT19Fsn9ts5V5C01cz6Jd0m6dUpl9QyZna9pBHn3C4ze1Pa9Syhq51zh81snaQ7zezJ6o1pvK9DGVl36nUej5jZekny9yN+/Zn6+2LrNzRYnzozy6gU1F91zn3br+74fkuSc25M0t0q/VO+38zKg5/qOit989tXSXpBZ/+zSMtVkt5hZgckfV2lqZDPqnP7K0lyzh329yMq/UG+XGm/r9OeG6qa29qv0gcP5Q8ZLkm7rnPoxybVzln/g2o/kPi0X367aj+QeMCvXyPplyp9GLHaL6/x2+o/kLgugP6apP+Q9Jm69R3bb0kDkvr9crek+yRdL+mbqv3A7UN++UbVfuB2q1++RLUfuO1X6cO2YH8XJL1Jcx8wdmx/Ja2Q1Fe1/DNJ29N+X6f+Bqj6AV2n0tEEz0j6RNr1nEP9X5P0nKRZleag3q/SXN1dkvZK+mHV/yiT9K++r49IGqrazx9L2udv76taPyTpUf+cf5H/9mnKfb5apbm9hyXt8bfrOrnfkn5T0m7f50cl/bVff5H/Bdzngyzn13f5x/v89ouq9vUJ36+nVHU0QKi/C6oN647tr+/bQ/72WLmmtN/XfN0cANpAKHPWAIAXQVgDQBsgrAGgDRDWANAGCGsAaAOENQC0AcIaANrA/wPUBpE86sqv5QAAAABJRU5ErkJggg==\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Hasil Prediksi yang didapatkan berdasarkan m dan bias untuk data training"
      ],
      "metadata": {
        "id": "_38NR_IkbaoH"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hWU40IL2smQe",
        "outputId": "93c61644-b8ec-463c-b846-fdb293b098d0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 1, 1, 1, 0, 0, 0, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "PredictResultManual = PredictResult(X_train, ModelManual.m, ModelManual.b)\n",
        "PredictResultManual\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Hasil training dan prediksi memiliki akurasi 100%, yang berarti w dan bias dapat menentukan class dari data training dengan baik"
      ],
      "metadata": {
        "id": "qxCVwZ0bbhDz"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lo5WkiocsmQf",
        "outputId": "c9760eda-d6ec-4250-f1cd-7a9764684241"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy :  100.0 %\n"
          ]
        }
      ],
      "source": [
        "count = 0\n",
        "correct = 0\n",
        "for count in range(np.size(PredictResultManual)):\n",
        "    if(PredictResultManual[count] == y_train[count]):\n",
        "        correct+=1\n",
        "    count+=1\n",
        "print(\"Accuracy : \", correct/count *100, \"%\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# kita melakukan prediksi dari data testing yang diberikan pada X_test, dan menghasilkan [0, 1, 0, 1]"
      ],
      "metadata": {
        "id": "VuV1pnvgbr_y"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Eaua-ZXXsmQf",
        "outputId": "6e79a809-a0b0-4589-b22e-f576bf6d7943"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 0, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "PredictTestingManual = PredictResult(X_test, ModelManual.m, ModelManual.b)\n",
        "PredictTestingManual"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Manipulasi data untuk visualisasi data"
      ],
      "metadata": {
        "id": "nrPvnCFnbyur"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G8NoUx0LsmQf",
        "outputId": "4a14ab1d-bab3-4b43-ae23-a997478a7530"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "y_all = []\n",
        "for data in y_train:\n",
        "    y_all.append(data)\n",
        "for data in PredictTestingManual:\n",
        "    y_all.append(data)\n",
        "arrayY_all = np.array(y_all)\n",
        "arrayY_all"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SAkE5vDjsmQf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "outputId": "ce0579c2-0ac2-4cb5-878a-306ab395d89f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      x     y  Class\n",
              "0  0.08  0.72      1\n",
              "1  0.26  0.58      1\n",
              "2  0.45  0.15      1\n",
              "3  0.60  0.30      1\n",
              "4  0.10  1.00      0\n",
              "5  0.35  0.95      0\n",
              "6  0.70  0.65      0\n",
              "7  0.92  0.45      0\n",
              "0  0.10  0.90      0\n",
              "1  0.40  0.20      1\n",
              "2  0.80  0.50      0\n",
              "3  0.20  0.60      1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d3b01478-ee6b-4ac3-9d1b-08aebcd5d712\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x</th>\n",
              "      <th>y</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.08</td>\n",
              "      <td>0.72</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.26</td>\n",
              "      <td>0.58</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.45</td>\n",
              "      <td>0.15</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.60</td>\n",
              "      <td>0.30</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.10</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.35</td>\n",
              "      <td>0.95</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.70</td>\n",
              "      <td>0.65</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.92</td>\n",
              "      <td>0.45</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.10</td>\n",
              "      <td>0.90</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.40</td>\n",
              "      <td>0.20</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.80</td>\n",
              "      <td>0.50</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.20</td>\n",
              "      <td>0.60</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d3b01478-ee6b-4ac3-9d1b-08aebcd5d712')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d3b01478-ee6b-4ac3-9d1b-08aebcd5d712 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d3b01478-ee6b-4ac3-9d1b-08aebcd5d712');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "dfX_test = pd.DataFrame(X_test, columns=['x','y'])\n",
        "dfX_test['Class'] = pd.DataFrame(PredictTestingManual)\n",
        "dfX_all = pd.concat([dfComplete, dfX_test])\n",
        "dfX_all\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Y7gyF5-Vv7zd"
      },
      "outputs": [],
      "source": [
        "dftrain = pd.DataFrame(X_train, columns=['x','y'])\n",
        "dftest = pd.DataFrame(X_test, columns=['x','y'])\n",
        "dfall = pd.concat([dftrain, dftest])\n",
        "arrayX_all = dfall.to_numpy()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Boundary Decision yang didapatkan berdasarkan m dan bias untuk data training"
      ],
      "metadata": {
        "id": "K3H5XO-pb3YM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def BoundaryDecisionLine(X) :\n",
        " return (-1 * ModelManual.b / ModelManual.m[1]) + ((-1 * ModelManual.m[0]/ModelManual.m[1]) * X[:, 0])"
      ],
      "metadata": {
        "id": "bTZrIJfK_9oX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Line1 = BoundaryDecisionLine(X_train)\n",
        "\n",
        "sns.scatterplot(x=X_train[:, 0], y=X_train[:, 1], hue=y_train, s=100)\n",
        "sns.lineplot(x=X_train[:, 0], y=Line1, label='Boundary Decision', color='red')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "oyx5fkftZAU9",
        "outputId": "aa4c603f-d9f4-46e5-dad6-02130eabaa16"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f97bfe4ffd0>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Boundary Decision yang didapatkan berdasarkan m dan bias untuk data Testing"
      ],
      "metadata": {
        "id": "tdHCYem1cAON"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Line2 = BoundaryDecisionLine(X_test)\n",
        "\n",
        "sns.scatterplot(x=X_test[:, 0], y=X_test[:, 1], hue=PredictTestingManual, s=100)\n",
        "sns.lineplot(x=X_test[:, 0], y=Line2, label='Boundary Decision', color='red')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "DaGxkoqIZNkx",
        "outputId": "ffc913c8-3ccf-445c-c56e-6da84d16d0fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f97bfec8650>"
            ]
          },
          "metadata": {},
          "execution_count": 42
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Boundary Decision yang didapatkan berdasarkan m dan bias untuk data gabungan training dan testing"
      ],
      "metadata": {
        "id": "BIYCsij-cM4a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Line3 = BoundaryDecisionLine(arrayX_all)\n",
        "\n",
        "sns.scatterplot(x=arrayX_all[:, 0], y=arrayX_all[:, 1], hue=arrayY_all, s=100)\n",
        "sns.lineplot(x=arrayX_all[:, 0], y=Line3, label='Boundary Decision', color='red')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "EZXdQqzmSL4S",
        "outputId": "70108cd1-18a8-4209-da0e-b31088d743e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f97bfcf0d10>"
            ]
          },
          "metadata": {},
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Program Manual Counting.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "interpreter": {
      "hash": "63fd5069d213b44bf678585dea6b12cceca9941eaf7f819626cde1f2670de90d"
    },
    "kernelspec": {
      "display_name": "Python 3.9.5 64-bit",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
